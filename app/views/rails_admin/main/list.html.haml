- params = request.params.except(:action, :controller, :model_name, :utf8)
- query = params[:query]
- filter = params[:filter]
- sort = params[:sort]
- sort_reverse = params[:sort_reverse]
- properties = @model_config.list.visible_fields.map{|property| property.with(:view => self)}
- filters_exist = !properties.select{|property| property.type == :boolean}.empty?
- # columns paginate
- @style, @other, properties = get_column_set(properties)
- head_javascript "rails_admin/application.js"
- head_style "rails_admin/list"
- head_javascript do
  $j(document).ready(function($) {
  $(this).one("ajax:success", function(e, data, status, xhr) {
  $("#block-tables.block").html(data);
  });
  });
- head_style do
  - @style.each do |key, value|
    \.grid thead #{".#{key}"}{
    width: #{value[:width]}px;
    }

#block-tables.block
  .secondary-navigation
    %ul.wat-cf
      %li.first.active
        %a{:href => "#block-text"} Index
      %li.disabled
        %a{:href => "#block-tables"} Show
      %li.disabled
        %a{:href => "#block-forms"} Edit
        
  .content
    .control
      = link_to rails_admin_history_model_path, :class => "button" do
        = t("admin.history.name")
        
      - if authorized? :new, @abstract_model
        = link_to rails_admin_new_path, :class => "button" do
          %img{:alt => "Add", :src => "/stylesheets/themes/activo/images/icons/add.png"}
          = t("admin.list.add_new")
          
      - if authorized? :delete, @abstract_model
        %button.button{:type => "submit", :onclick => "$j('#bulk_delete_form').submit(); return false;"}
          %img{:alt => "Remove", :src => "/stylesheets/themes/activo/images/icons/cross.png"}
          = t("admin.list.delete_selected")
          
    %h2.title= @page_name
    .inner
      = render(:partial => 'layouts/rails_admin/flash', :locals => {:flash => flash})
      = form_tag rails_admin_bulk_delete_path(:model_name => @abstract_model.to_param), :method => :get, :id => "bulk_delete_form", :class => "form" do
        %table.table.grid
          %tr
            %th.first
              %input.checkbox.toggle{:type => "checkbox"}
            %th.other.left{ :style => "#{'display: none' if @other.include?("left")}" }...
            - properties.each do |property|
              - property_name = property.name
              - property_pretty_name = property.label
              - selected = sort == property_name.to_s
              %th{:class => "#{property.css_class} #{selected ? "selected" : nil}"}
                - if property.sortable?
                  - sort_location = params.merge(:sort => property_name).reject{|key, value| key.to_sym == :sort_reverse}.merge(selected && sort_reverse != "true" ? {:sort_reverse => "true"} : {})
                  - sort_direction = selected ? (sort_reverse ? "ascending" : "descending") : nil
                  = link_to(property_pretty_name.upcase, sort_location, :class => sort_direction, :remote => true)
                - else
                  = property_pretty_name.upcase
            %th.other.right{ :style => "#{'display: none' if @other.include?("right")}" }...
        
            %th.last
        
          %tbody
            - @objects.each do |object|
              %tr{:class => cycle("odd", "even")}
                %td.action.select= check_box_tag "bulk_ids[]", object.id, false, :id => "bulk_destroy_#{object.id}", :class => "checkbox"
                - other_left = params.reject{|key, value| key == "set"}.merge(:set => params[:set].to_i - 1)
                %td.other.left{ :style => "#{'display: none' if @other.include?("left")}" }= link_to "...", other_left, :remote => true
                - properties.map{|property| property.bind(:object, object)}.each do |property|
                  %td{:class => "#{property.css_class}"}= [:text, :string].include?(property.type) ? property.formatted_value[0..40] : property.formatted_value
                - other_right = params.reject{|key, value| key == "set"}.merge(:set => params[:set].to_i + 1)
                %td.other.right{ :style => "#{'display: none' if @other.include?("right")}" }= link_to "...", other_right, :remote => true
                %td.last
                  - if show_url = url_for(object) rescue nil
                    = action_icon(show_url, :show, "Show")   
                  - if authorized? :edit, @abstract_model, object
                    = action_icon(rails_admin_edit_path(:model_name => @abstract_model.to_param, :id => object.id), :edit, t("admin.list.edit_action"))                  
                  - if authorized? :delete, @abstract_model, object
                    = action_icon(rails_admin_delete_path(:model_name => @abstract_model.to_param, :id => object.id), :cross, t("admin.list.delete_action")) 
      
        .pagination
          - if @page_count.to_i > 1
            = paginate(@current_page, @page_count, :url => params).html_safe
          - if @page_count.to_i == 2
            = link_to(t("admin.list.show_all"), params.merge(:all => true), :remote => true, :class => "showall")
        .left(style="float:left; padding-top:0.5em;")
          = @record_count
          = @model_config.abstract_model.model.model_name.human(:count => @record_count, :default => @record_count != 1 ? @model_config.label.downcase.pluralize : @model_config.label.downcase)
        
      = form_tag(params.reject{|key, value| key.to_sym == :page}, :method => "get", :remote => true, :class => "search") do
        .columns.wat-cf
          .column.right
            %input#search.search_box{:name => "query", :type => "text", :value => query, :onblur => "if (!value) { value = '#{t("admin.list.search")}' }", :onfocus => "if (value == '#{t("admin.list.search")}') { value = '' }"}
            %input.search_submit{:type => "submit", :value => ""}
      .wat-cf
      